#!/bin/bash

IDL_FILE="test.idl"

#show help info
usage()
{
    echo
    echo "USAGE: $0 test_folder]"
    echo "Params List";
    echo "    test_folder  : folder where files for the test are located" 
    echo "    --help or -h : Show this info"
    echo
}

#show help message if the first param is not the folder with the test
if [ -z $1 ]; then
    echo "ERROR: Parameters expected"
    usage
    exit
fi

#show help info if the first param is -h or --help
if [ $1 == "--help" ] || [ $1 == "-h" ]; then
    usage
    exit
fi

HOME_PATH=`pwd`
#echo $HOME_PATH
WORK_PATH=$HOME_PATH/$1
#echo $WORK_PATH

#check directory with full path exits
if [ ! -d $WORK_PATH ]; then
    echo "ERROR: Not found directory: " $WORK_PATH
    usage
    exit
fi

#check idl file with full path exits
if [ ! -f $WORK_PATH/$IDL_FILE ]; then
    echo "ERROR: Not found file : " $WORK_PATH/$IDL_FILE
    exit
fi

cd $WORK_PATH

#searching of declared modules in the IDL FILE
MODULE_DETECTED=false
for WORD in $(cat $WORK_PATH/$IDL_FILE | grep module)
do
    #echo "MODULE_DETECTED: " $MODULE_DETECTED

    if [ "$MODULE_DETECTED" = true ]; then
        MODULE_DETECTED=false
        MODULE_NAME=$WORD
        #echo "MODULE_NAME == " $MODULE_NAME

        #deleting previous autogenerated files
        echo "Deleting files in folder $WORK_PATH/$MODULE_NAME"
        rm -rf $WORK_PATH/$MODULE_NAME/*

        #autogenerating python files from IDL file using the IDLC compiler for python
        echo "Generating python file from IDL file" $IDL_FILE
        #Using the install plugin:
        #/usr/local/lib/cyclonedds/bin/idlc -l/usr/local/lib/python3.8/dist-packages/cyclonedds/_idlpy.cpython-38-x86_64-linux-gnu.so -Wno-implicit-extensibility -o ${WORK_PATH} ${WORK_PATH}/$IDL_FILE
        #Using a build plugin in the home folder
        /usr/local/lib/cyclonedds/bin/idlc -l/home/jasorian/cyclonedds-cxx/cyclonedds-python/build/lib.linux-x86_64-cpython-38/cyclonedds/_idlpy.cpython-38-x86_64-linux-gnu.so -Wno-implicit-extensibility -o ${WORK_PATH} ${WORK_PATH}/$IDL_FILE
        

        #checkin python file has been generated (name of autogenerated python file == "_" + IDL_FILE(without extension) + ".py" )
        IDL_FILE_GENERATED=$WORK_PATH/$MODULE_NAME/"_"
        IDL_FILE_GENERATED=$IDL_FILE_GENERATED$(echo $IDL_FILE | cut -f 1 -d '.')
        IDL_FILE_GENERATED=$IDL_FILE_GENERATED".py"
        echo $IDL_FILE_GENERATED

        if [ ! -f $IDL_FILE_GENERATED ]; then
            echo "ERROR: Python file ${IDL_FILE_GENERATED} has not been autogenerated"
            exit
        fi

        echo "Python file ${IDL_FILE_GENERATED} has been autogenerated"


        continue
    fi

    if [ $WORD == "module" ]; then
        MODULE_DETECTED=true
        #echo "WORD == module"
        continue
    fi
done

#launching publisher and subscriber adapted for the messages defined in the IDL_FILE
echo "Launching publisher during 10 seconds"
python3 publisher.py &

echo "Launching subscriber during 10 seconds"
python3 subscriber.py &

#wait 10 seconds to check results
sleep 10

#kill publisher and subscriber
killall python3
